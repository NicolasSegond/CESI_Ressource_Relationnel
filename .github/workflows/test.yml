name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker image for development
        run: |
          # Set .env to development mode
          sed -i 's/APP_ENV=prod/APP_ENV=dev/g' api/.env || echo 'APP_ENV=dev' >> api/.env
          cd api
          docker build -t moimathis/cesibackend:test .

      - name: Push Docker image with test tag
        run: docker push moimathis/cesibackend:test

  test:
    runs-on: ubuntu-latest
    needs: build

    services:
      docker:
        image: moimathis/cesibackend:test
        options: --health-cmd="curl --fail http://127.0.0.1:8000/api || exit 1" --health-interval=10s --health-timeout=5s --health-retries=5
        ports:
          - 8000:8000

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Wait for Docker container to be healthy
        run: |
          for i in {1..60}; do
            if [ "$(docker inspect --format='{{json .State.Health.Status}}' $(docker ps -q -f ancestor=moimathis/cesibackend:test))" == '"healthy"' ]; then
              echo "Container is healthy"
              exit 0
            fi
            echo "Waiting for container to be healthy... attempt $i"
            sleep 5
          done
          echo "Container did not become healthy in time"
          docker logs $(docker ps -q -f ancestor=moimathis/cesibackend:test)
          docker stop $(docker ps -q -f ancestor=moimathis/cesibackend:test)
          docker rm $(docker ps -a -q -f ancestor=moimathis/cesibackend:test)
          exit 1

      - name: Verify Composer dependencies
        run: docker exec $(docker ps -q -f ancestor=moimathis/cesibackend:test) ls -l /var/www/html/vendor/

      - name: Install Composer dependencies
        run: docker exec $(docker ps -q -f ancestor=moimathis/cesibackend:test) composer install --no-scripts --no-autoloader --no-interaction

      - name: Dump Composer autoload
        run: docker exec $(docker ps -q -f ancestor=moimathis/cesibackend:test) composer dump-autoload

      - name: Run PHPUnit tests
        run: docker exec $(docker ps -q -f ancestor=moimathis/cesibackend:test) vendor/bin/phpunit

      - name: Cleanup Docker container
        run: |
          docker stop $(docker ps -q -f ancestor=moimathis/cesibackend:test)
          docker rm $(docker ps -a -q -f ancestor=moimathis/cesibackend:test)

  build_frontend:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '16' # Specify your Node.js version

      - name: Install dependencies and build
        run: |
          cd awp
          npm install
          npm run build

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Build Docker image for frontend
        run: |
          cd awp
          docker build -t moimathis/cesifrontend:latest .

      - name: Push Docker image for frontend
        run: docker push moimathis/cesifrontend:latest

  test_frontend:
    runs-on: ubuntu-latest
    needs: build_frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Run dummy test
        run: echo "Frontend tests are successful"

  deploy_backend:
    runs-on: ubuntu-latest
    needs: test

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Update .env for production environment
        run: |
          # Set .env to production mode
          sed -i 's/APP_ENV=dev/APP_ENV=prod/g' api/.env || echo 'APP_ENV=prod' >> api/.env

      - name: Build Docker image for production
        run: |
          cd api
          docker build -t moimathis/cesibackend:latest .

      - name: Push the Docker image with latest tag
        run: docker push moimathis/cesibackend:latest

      - name: Install Symfony assets
        run: docker run --rm moimathis/cesibackend:latest bin/console assets:install

      - name: Deploy application
        run: echo "Deploy steps go here"

  deploy_frontend:
    runs-on: ubuntu-latest
    needs: test_frontend

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Log in to Docker Hub
        run: echo "${{ secrets.DOCKER_HUB_PASSWORD }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin

      - name: Push the Docker image for frontend
        run: docker push moimathis/cesifrontend:latest
